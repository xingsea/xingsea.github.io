[{"content":"在 Linux 中，查看进程的命令主要有 ps、top、htop、pgrep、pstree 等，下面详细解释每个命令的用途、参数和示例。\n1. ps（Process Status）—— 查看当前进程状态 作用：显示当前终端或系统运行的进程信息。\n常用选项： 选项 完整单词 说明 -e --every 显示 所有进程（包括其他用户的进程） -f --full 显示 完整格式（包括命令行参数） -a --all 显示 终端关联的所有进程 -u --user 显示 指定用户的进程 -x --no-ttys 显示 没有控制终端的进程（如守护进程） -aux 组合选项 显示 所有用户的所有进程（常用） 示例： (1) 查看当前终端运行的进程 1 ps 输出：\n1 2 3 PID TTY TIME CMD 1234 pts/0 00:00:00 bash 5678 pts/0 00:00:00 ps PID：进程 ID TTY：终端设备 TIME：CPU 占用时间 CMD：命令名称 (2) 查看所有进程（完整信息） 1 ps -ef 输出：\n1 2 3 4 UID PID PPID C STIME TTY TIME CMD root 1 0 0 10:00 ? 00:00:01 /sbin/init root 123 1 0 10:00 ? 00:00:00 /usr/sbin/sshd user 4567 1234 0 11:00 pts/0 00:00:00 nginx: worker process UID：用户 ID PPID：父进程 ID STIME：启动时间 CMD：完整命令 (3) 查看特定进程（如 nginx） 1 ps aux | grep nginx 输出：\n1 2 root 1234 0.0 0.1 123456 7890 ? Ss 12:34 0:00 nginx: master process www-data 5678 0.0 0.2 234567 8901 ? S 12:35 0:00 nginx: worker process USER：运行进程的用户 %CPU：CPU 占用率 %MEM：内存占用率 2. top（Table of Processes）—— 动态查看进程 作用：实时显示系统进程状态（类似 Windows 的任务管理器）。\n常用交互命令： 按键 功能 q 退出 k 杀死进程（输入 PID） M 按内存排序 P 按 CPU 排序 1 显示所有 CPU 核心 示例： 1 top 输出：\n1 2 3 4 5 6 7 8 9 top - 14:30:00 up 1 day, 2:30, 1 user, load average: 0.15, 0.10, 0.05 Tasks: 120 total, 2 running, 118 sleeping, 0 stopped, 0 zombie %Cpu(s): 2.3 us, 1.0 sy, 0.0 ni, 96.7 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st KiB Mem : 8000000 total, 2000000 free, 3000000 used, 3000000 buff/cache KiB Swap: 2000000 total, 1800000 free, 200000 used. 4000000 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1234 root 20 0 300000 50000 10000 S 2.3 0.6 1:23.45 nginx 5678 user 20 0 400000 80000 20000 R 1.0 1.0 0:12.34 python3 PR：进程优先级 NI：Nice 值（进程优先级调整） VIRT：虚拟内存占用 RES：物理内存占用 SHR：共享内存 3. htop（Enhanced top）—— 增强版进程查看器 作用：比 top 更直观，支持鼠标操作、颜色高亮。\n安装（Ubuntu/Debian）： 1 sudo apt install htop 使用： 1 htop （支持鼠标点击、树状视图、搜索进程）\n4. pgrep（Process Grep）—— 查找进程 ID 作用：根据名称查找进程 ID（PID）。\n示例： 1 pgrep nginx 输出：\n1 2 1234 5678 （返回 nginx 进程的 PID）\n5. pstree（Process Tree）—— 树状显示进程 作用：以树状结构显示进程关系。\n示例： 1 pstree -p 输出：\n1 2 3 4 systemd(1)─┬─sshd(123)───sshd(456)───bash(789)───pstree(999) ├─nginx(1234)─┬─nginx(5678) │ └─nginx(5679) └─dockerd(2345)───containerd(3456) -p：显示 PID 可以看到 nginx 的主进程和子进程关系 总结 命令 作用 示例 ps 查看进程状态 ps aux | grep nginx top 实时监控进程 top htop 增强版 top htop pgrep 查找进程 PID pgrep nginx pstree 树状显示进程 pstree -p 这些命令是 Linux 系统管理和故障排查的必备工具！ 🚀\n","date":"2025-08-14T09:53:31+08:00","permalink":"https://XingSea.github.io/p/linux_select_process_cmd/","title":"Linux_Select_Process_Cmd"},{"content":"MyBatis-Plus 逻辑删除与唯一索引冲突问题解决方案 一、问题背景 关键词：MyBatis-Plus（MP）、逻辑删除、唯一索引、数据插入冲突\n问题描述 MyBatis-Plus 默认逻辑删除规则：\n1 表示已删除（逻辑删除状态） 0 表示未删除（正常状态） 场景复现：\n表结构：user 表包含 name（唯一索引）和 is_delete（逻辑删除字段）\n首次插入：插入 name=张三，is_delete=0（未删除）。 逻辑删除：将该记录 is_delete 更新为 1（标记删除）。 再次插入：尝试插入 name=张三，因 name 唯一索引冲突报错。 初步解决方案：\n创建 (name, is_delete) 联合唯一索引，允许不同 is_delete 值的相同 name 存在。\n新问题：当第二次插入的 张三 被逻辑删除时，会产生两条 name=张三 且 is_delete=1 的记录，再次触发联合索引冲突。 二、解决方案 方案一：动态变更逻辑删除值（推荐） 核心思路：使用唯一标识（如主键 id）作为已删除状态值，避免重复。\n1. 字段配置 在逻辑删除字段上添加 @TableLogic 注解，指定：\nvalue：未删除值（如 0） delval：已删除值（使用主键 id，需与字段类型一致） 1 2 @TableLogic(value = \u0026#34;0\u0026#34;, delval = \u0026#34;#{id}\u0026#34;) // 或全局配置 private Integer is_delete; // 字段类型需与 id 一致（如 Integer） 2. 执行逻辑说明 查询：仅返回 is_delete = 0 的记录（未删除）。\n删除：将 is_delete 更新为当前记录的 id（唯一值）。\n1 2 -- 逻辑删除执行 SQL UPDATE user SET is_delete = #{id} WHERE id = #{currentId}; 3. 优势与注意事项 唯一性保障：每个删除记录的 is_delete 值为唯一主键，避免联合索引冲突。 兼容性：适用于大多数数据库，需确保 id 与 is_delete 字段类型一致（如均为 INT）。 方案二：利用 NULL 值特性（MySQL 场景） 核心思路：使用 NULL 表示已删除状态，利用 MySQL 允许唯一索引中存在多个 NULL 的特性。\n1. 字段配置 1 2 @TableLogic(value = \u0026#34;1\u0026#34;, delval = \u0026#34;NULL\u0026#34;) // value 设为未删除值（如 1） private Integer is_delete; // 允许为 NULL 2. 数据形态 name is_delete 状态 张三 1 未删除 张三 NULL 已删除 张三 NULL 已删除 3. 适用场景 仅限 MySQL：其他数据库（如 Oracle）可能不允许唯一索引中存在多个 NULL。 字段允许为空：需将 is_delete 字段设置为可空（NULLABLE）。 三、方案对比 维度 方案一（动态值） 方案二（NULL 值） 兼容性 全数据库兼容 仅限 MySQL（需验证其他数据库） 字段要求 需与主键类型一致 字段需允许 NULL 唯一性 绝对唯一（基于主键） 依赖数据库特性（MySQL 允许） 复杂度 需配置 delval 表达式 简单配置 四、总结 优先选择方案一：通过主键动态生成已删除值，兼顾唯一性和兼容性，适用于大多数场景。 MySQL 特定场景可选方案二：需注意字段可空性和数据库兼容性限制。 最佳实践：在设计表结构时，提前规划逻辑删除字段的取值规则，结合业务场景选择合适的唯一标识策略，避免后续索引冲突问题。\n","date":"2025-03-09T00:28:58+08:00","permalink":"https://XingSea.github.io/p/mybatis-plus/","title":"MyBatis-Plus"},{"content":"MySQL 基本 SQL 语句使用详解 在数据库管理系统中，MySQL 凭借其开源、高效、稳定等特点，成为众多开发者的首选。SQL（Structured Query Language）作为操作 MySQL 数据库的核心语言，掌握其基本语句的使用是进行数据库开发与管理的基础。本文将详细介绍 MySQL 中常用的基本 SQL 语句及其使用方法。\n一、数据库操作 1. 创建数据库 使用CREATE DATABASE语句可以创建一个新的数据库，语法如下：\n1 CREATE DATABASE database_name; 其中，database_name是你想要创建的数据库名称。例如，创建一个名为testdb的数据库：\n1 CREATE DATABASE testdb; 为了避免数据库已存在导致创建失败的错误，可以使用CREATE DATABASE IF NOT EXISTS语句，它会先检查数据库是否存在，若不存在则创建：\n1 CREATE DATABASE IF NOT EXISTS testdb; 2. 选择数据库 在对数据库中的表和数据进行操作前，需要先选择要操作的数据库，使用USE语句：\n1 USE database_name; 例如，选择刚刚创建的testdb数据库：\n1 USE testdb; 3. 删除数据库 使用DROP DATABASE语句删除数据库，语法如下：\n1 DROP DATABASE database_name; 比如删除testdb数据库：\n1 DROP DATABASE testdb; 同样，为防止删除不存在的数据库报错，可以使用DROP DATABASE IF EXISTS语句：\n1 DROP DATABASE IF EXISTS testdb; 二、表操作 1. 创建表 在选定数据库后，使用CREATE TABLE语句创建表，语法如下：\n1 2 3 4 5 CREATE TABLE table_name ( column1 datatype constraint, column2 datatype constraint, ... ); 其中，table_name是表名，column是列名，datatype是数据类型（如INT、VARCHAR、DATE等），constraint是约束条件（如NOT NULL、PRIMARY KEY等）。\n例如，在testdb数据库中创建一个名为students的表，包含id（学生编号）、name（学生姓名）、age（学生年龄）字段：\n1 2 3 4 5 CREATE TABLE students ( id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(50) NOT NULL, age INT ); 上述语句中，id字段设置为主键且自增长，name字段不允许为空。\n2. 查看表结构 使用DESCRIBE或DESC语句可以查看表的结构信息，包括列名、数据类型、是否为NULL、键等：\n1 2 3 DESCRIBE students; -- 或者 DESC students; 3. 修改表 （1）添加列 使用ALTER TABLE语句添加列，语法如下：\n1 ALTER TABLE table_name ADD column_name datatype constraint; 例如，在students表中添加gender（性别）字段：\n1 ALTER TABLE students ADD gender VARCHAR(10); （2）修改列 修改列的数据类型或约束条件，语法如下：\n1 ALTER TABLE table_name MODIFY column_name new_datatype new_constraint; 比如将students表中age字段的数据类型改为TINYINT：\n1 ALTER TABLE students MODIFY age TINYINT; （3）删除列 删除表中的列，语法如下：\n1 ALTER TABLE table_name DROP column_name; 例如，删除students表中的gender字段：\n1 ALTER TABLE students DROP gender; 4. 删除表 使用DROP TABLE语句删除表，语法如下：\n1 DROP TABLE table_name; 删除students表：\n1 DROP TABLE students; 若要防止删除不存在的表报错，可以使用DROP TABLE IF EXISTS语句：\n1 DROP TABLE IF EXISTS students; 三、数据操作 1. 插入数据 （1）插入单条数据 使用INSERT INTO语句插入单条数据，语法如下：\n1 INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...); 例如，向students表中插入一条学生记录：\n1 INSERT INTO students (name, age) VALUES (\u0026#39;Alice\u0026#39;, 20); 如果表中的列是按照默认顺序插入，且不包含自增长列，可以省略列名：\n1 INSERT INTO students VALUES (NULL, \u0026#39;Bob\u0026#39;, 22); （2）插入多条数据 一次插入多条数据，语法如下：\n1 2 3 4 INSERT INTO table_name (column1, column2, ...) VALUES (value1_1, value1_2, ...), (value2_1, value2_2, ...), ...; 例如，向students表中插入两条学生记录：\n1 2 3 INSERT INTO students (name, age) VALUES (\u0026#39;Charlie\u0026#39;, 21), (\u0026#39;David\u0026#39;, 23); 2. 查询数据 使用SELECT语句查询数据，语法如下：\n1 SELECT column1, column2, ... FROM table_name WHERE condition; 其中，column1, column2, \u0026hellip;是要查询的列名，table_name是表名，WHERE子句用于筛选符合条件的数据。\n（1）查询所有列 查询students表中的所有数据：\n1 SELECT * FROM students; （2）查询指定列 查询students表中学生的姓名和年龄：\n1 SELECT name, age FROM students; （3）条件查询 查询students表中年龄大于 20 岁的学生：\n1 SELECT * FROM students WHERE age \u0026gt; 20; （4）使用逻辑运算符 查询students表中年龄大于 20 岁且姓名为Bob的学生：\n1 SELECT * FROM students WHERE age \u0026gt; 20 AND name = \u0026#39;Bob\u0026#39;; 查询students表中年龄大于 20 岁或者姓名为Alice的学生：\n1 SELECT * FROM students WHERE age \u0026gt; 20 OR name = \u0026#39;Alice\u0026#39;; 3. 更新数据 使用UPDATE语句更新数据，语法如下：\n1 UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition; 例如，将students表中姓名为Alice的学生年龄更新为 21 岁：\n1 UPDATE students SET age = 21 WHERE name = \u0026#39;Alice\u0026#39;; 4. 删除数据 使用DELETE FROM语句删除数据，语法如下：\n1 DELETE FROM table_name WHERE condition; 例如，删除students表中年龄小于 20 岁的学生记录：\n1 DELETE FROM students WHERE age \u0026lt; 20; 如果省略WHERE子句，将删除表中的所有数据，但表结构依然存在：\n1 DELETE FROM students; 以上就是 MySQL 中最基本也是最常用的 SQL 语句，通过灵活运用这些语句，你可以对 MySQL 数据库进行全面的管理和操作。在实际开发中，还会涉及到更多复杂的查询和操作，如连接查询、子查询、聚合函数等，后续我们将继续深入探讨。\n","date":"2025-02-04T16:10:33+08:00","permalink":"https://XingSea.github.io/p/mysql/","title":"MySQL"}]